{"version":3,"file":"static/js/158.6ac29bdb.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactPage/Contacts.module.css?375f","pages/ContactPage/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContactName = e.target.elements.name.value;\n\n    const isContactExist =\n      contacts &&\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContactName.toLowerCase()\n      );\n\n    if (isContactExist) {\n      alert('Contact with this name already exist!');\n      e.target.reset();\n      return;\n    }\n    const newContact = {\n      id: nanoid(),\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n          required\n          placeholder=\"Enter name...\"\n        />\n      </label>\n\n      <label className={css.label}>\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter number...\"\n        />\n      </label>\n      <button className={css.button} type=\"submit\">\n        New contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__gxreB\",\"button\":\"ContactItem_button__IRFBz\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ name, id, phone }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.item}>\n      {name + ': ' + phone}\n      <button\n        className={css.button}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\nimport ContactItem from '../ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return contacts.length > 0 ? (\n    <ul className={css.list}>\n      {contacts.map(({ name, id, number }) => (\n        <ContactItem key={id} name={name} id={id} phone={number} />\n      ))}\n    </ul>\n  ) : (\n    <p>This contact does not exist</p>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { setFilterdContacts } from '../../redux/contacts/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filterQuery = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const showFilteredContacts = e => {\n    dispatch(setFilterdContacts(e.target.value));\n  };\n  return (\n    <label className={css.label}>\n      Find in Contacts\n      <input\n        className={css.input}\n        type=\"text\"\n        onChange={showFilteredContacts}\n        value={filterQuery}\n        placeholder=\"Start entering a contact\"\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"Contacts_box__Uwh0J\",\"title\":\"Contacts_title__dHlef\"};","import { useSelector, useDispatch } from 'react-redux';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport {\n  selectContacts,\n  getError,\n  getIsLoading,\n} from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport css from './Contacts.module.css';\n\nexport default function Contacts() {\n  const listOfContacts = useSelector(selectContacts);\n  const loading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.box}>\n      <div>\n        <h1 className={css.title}>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <div>\n        {loading && !error ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            {listOfContacts && listOfContacts.length > 0 ? (\n              <>\n                <h2 className={css.title}>Contacts</h2>\n                <Filter />\n                <ContactList />\n              </>\n            ) : (\n              <p>Your contact list is empty</p>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","getIsLoading","isLoading","getError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","_jsxs","className","css","onSubmit","e","preventDefault","newContactName","target","elements","value","some","alert","reset","newContact","number","addContact","children","_jsx","type","pattern","title","required","placeholder","_ref","phone","onClick","deleteContact","map","ContactItem","filterQuery","onChange","setFilterdContacts","Contacts","listOfContacts","loading","useEffect","fetchContacts","ContactForm","_Fragment","Filter","ContactList"],"sourceRoot":""}